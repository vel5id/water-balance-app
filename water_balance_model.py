"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
====================================

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ Sentinel-2, GLEAM, IMERG –∏ –∫—Ä–∏–≤—É—é "–ü–ª–æ—â–∞–¥—å-–û–±—ä—ë–º"
–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–∞.

–ê–≤—Ç–æ—Ä: GitHub Copilot
–î–∞—Ç–∞: 2025-08-07
"""

import os
from pathlib import Path
import glob
import re
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

# –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞)
ROOT = Path(__file__).resolve().parent
SENTINEL_ROOT_DIR = str(ROOT)
GLEAM_DATA_PATH = str(ROOT / 'GLEAM' / 'processed' / 'gleam_summary_all_years.csv')
IMERG_DATA_PATH = str(ROOT / 'precipitation_timeseries.csv')
AREA_VOLUME_CURVE_PATH = str(ROOT / 'processing_output' / 'area_volume_curve.csv')

# –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
OUTPUT_DIR = str(ROOT / 'water_balance_output')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
NDWI_THRESHOLD = 0.275  # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–¥—ã
INTERPOLATION_METHOD = 'linear'  # –ú–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤

print("=== –ú–û–î–ï–õ–¨ –í–û–î–ù–û–ì–û –ë–ê–õ–ê–ù–°–ê ===")
print("–ê–≤—Ç–æ—Ä: GitHub Copilot")
print("================================\n")

# --- –ú–û–î–£–õ–¨ 1: –û–ë–†–ê–ë–û–¢–ö–ê SENTINEL-2 ---

def find_sentinel_files(root_dir):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã Sentinel-2 —Ñ–∞–π–ª–æ–≤."""
    print("üõ∞Ô∏è  –ü–æ–∏—Å–∫ —Å–Ω–∏–º–∫–æ–≤ Sentinel-2...")
    
    files = glob.glob(os.path.join(root_dir, '**', '*_Sentinel-2_L2A_*.tiff'), recursive=True)
    file_groups = {}
    date_pattern = re.compile(r'(\d{4}-\d{2}-\d{2})')
    
    for f in files:
        match = date_pattern.search(os.path.basename(f))
        if not match:
            continue
        date_str = match.group(1)
        if date_str not in file_groups:
            file_groups[date_str] = {}
        
        if '_B03_' in f:
            file_groups[date_str]['b03'] = f
        elif '_B08_' in f:
            file_groups[date_str]['b08'] = f
        elif 'Scene_classification_map' in f:
            file_groups[date_str]['scl'] = f
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ –Ω–∞–±–æ—Ä—ã
    valid_groups = {d: p for d, p in file_groups.items() 
                   if 'b03' in p and 'b08' in p and 'scl' in p}
    
    sorted_dates = sorted(valid_groups.keys())
    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(sorted_dates)} –ø–æ–ª–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å–Ω–∏–º–∫–æ–≤")
    if sorted_dates:
        print(f"   –ü–µ—Ä–∏–æ–¥: {sorted_dates[0]} ‚Äî {sorted_dates[-1]}")
    
    return [(d, valid_groups[d]['b03'], valid_groups[d]['b08'], valid_groups[d]['scl']) 
            for d in sorted_dates]

def calculate_water_area(b03_path, b08_path, scl_path, pixel_area_km2_cache):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –≤–æ–¥–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –≤ –∫–º¬≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞."""
    try:
        import rasterio
        from rasterio.warp import reproject, Resampling
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º B03 (Green) –∫–∞–∫ –æ—Å–Ω–æ–≤—É
        with rasterio.open(b03_path) as green_src:
            green = green_src.read(1).astype('float32')
            profile = green_src.profile
            target_shape = green_src.shape
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∏–∫—Å–µ–ª—è –≤ –∫–º¬≤ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
            if pixel_area_km2_cache is None:
                transform = green_src.transform
                crs = green_src.crs
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å –ø–∏–∫—Å–µ–ª—è —Å —É—á—ë—Ç–æ–º —Ç–∏–ø–∞ CRS
                if crs is not None and not crs.is_geographic:
                    # –ü—Ä–æ–µ–∫—Çed CRS: –µ–¥–∏–Ω–∏—Ü—ã –≤ –º–µ—Ç—Ä–∞—Ö. –ü–ª–æ—â–∞–¥—å –ø–∏–∫—Å–µ–ª—è = |a*e - b*d| (–¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç –∞—Ñ—Ñ–∏–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã)
                    a = transform.a
                    b = transform.b
                    d_ = transform.d
                    e = transform.e
                    pixel_area_m2 = abs(a * e - b * d_)
                    pixel_area_km2 = pixel_area_m2 / 1_000_000.0
                else:
                    # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è CRS (–≥—Ä–∞–¥—É—Å—ã): –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–¥—É—Å—ã –≤ –º–µ—Ç—Ä—ã —Å –ø–æ–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —à–∏—Ä–æ—Ç—É
                    bounds = green_src.bounds
                    pixel_width_deg = abs(transform.a)
                    pixel_height_deg = abs(transform.e)
                    center_lat = (bounds.bottom + bounds.top) / 2
                    # –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –º–µ—Ç—Ä—ã
                    m_per_deg_lat = 111132.954
                    m_per_deg_lon = 111320.0 * float(np.cos(np.radians(center_lat)))
                    pixel_area_m2 = (pixel_width_deg * m_per_deg_lon) * (pixel_height_deg * m_per_deg_lat)
                    pixel_area_km2 = pixel_area_m2 / 1_000_000.0
            else:
                pixel_area_km2 = pixel_area_km2_cache

        # –ü–µ—Ä–µ–ø—Ä–æ–µ—Ü–∏—Ä—É–µ–º NIR (B08) –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ Green-–∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–º–µ—â–µ–Ω–∏—è
        with rasterio.open(b08_path) as nir_src:
            nir = np.empty(target_shape, dtype='float32')
            reproject(
                source=nir_src.read(1),
                destination=nir,
                src_transform=nir_src.transform,
                src_crs=nir_src.crs,
                dst_transform=green_src.transform,
                dst_crs=green_src.crs,
                resampling=Resampling.bilinear
            )

        # –ü–µ—Ä–µ–ø—Ä–æ–µ—Ü–∏—Ä—É–µ–º SCL –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ Green-–∫–∞–Ω–∞–ª–∞
        with rasterio.open(scl_path) as scl_src:
            scl_data = np.empty(target_shape, dtype='uint8')
            reproject(
                source=scl_src.read(1),
                destination=scl_data,
                src_transform=scl_src.transform,
                src_crs=scl_src.crs,
                dst_transform=green_src.transform,
                dst_crs=green_src.crs,
                resampling=Resampling.nearest
            )
        
        # –ú–∞—Å–∫–∏—Ä—É–µ–º –æ–±–ª–∞–∫–∞
        cloud_mask = np.isin(scl_data, [3, 8, 9, 10, 11])
        green[cloud_mask] = np.nan
        nir[cloud_mask] = np.nan

        # –í—ã—á–∏—Å–ª—è–µ–º NDWI
        np.seterr(divide='ignore', invalid='ignore')
        ndwi = (green - nir) / (green + nir)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –≤–æ–¥—ã
        water_mask = np.nan_to_num(ndwi) > NDWI_THRESHOLD
        water_pixels = np.sum(water_mask)
        water_area_km2 = water_pixels * pixel_area_km2
        
        return water_area_km2, pixel_area_km2
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–Ω–∏–º–∫–∞: {e}")
        return np.nan, pixel_area_km2_cache

def process_sentinel_timeseries():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –ø–ª–æ—â–∞–¥–µ–π –≤–æ–¥–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∏–∑ —Å–Ω–∏–º–∫–æ–≤ Sentinel-2."""
    print("\nüìä –ú–û–î–£–õ–¨ 1: –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ Sentinel-2")
    print("-" * 50)
    
    file_groups = find_sentinel_files(SENTINEL_ROOT_DIR)
    if not file_groups:
        raise FileNotFoundError("‚ùå –°–Ω–∏–º–∫–∏ Sentinel-2 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    results = []
    pixel_area_km2_cache = None
    
    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(file_groups)} —Å–Ω–∏–º–∫–æ–≤...")
    for i, (date_str, b03, b08, scl) in enumerate(file_groups):
        print(f"   {i+1:2d}/{len(file_groups)} {date_str}", end=" ")
        
        area_km2, pixel_area_km2_cache = calculate_water_area(b03, b08, scl, pixel_area_km2_cache)
        
        if not np.isnan(area_km2):
            print(f"‚Üí {area_km2:.2f} –∫–º¬≤")
            results.append({
                'date': pd.to_datetime(date_str),
                'area_km2': area_km2,
                'source': 'Sentinel-2'
            })
        else:
            print("‚Üí –û—à–∏–±–∫–∞")
    
    if not results:
        raise ValueError("‚ùå –ù–∏ –æ–¥–∏–Ω —Å–Ω–∏–º–æ–∫ –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    df = pd.DataFrame(results)
    df = df.sort_values('date').reset_index(drop=True)
    
    print(f"\n‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ Sentinel-2 —Å–æ–∑–¥–∞–Ω:")
    print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {df['date'].min().strftime('%Y-%m-%d')} ‚Äî {df['date'].max().strftime('%Y-%m-%d')}")
    print(f"   üåä –ü–ª–æ—â–∞–¥—å: {df['area_km2'].min():.2f} ‚Äî {df['area_km2'].max():.2f} –∫–º¬≤")
    if pixel_area_km2_cache is not None:
        print(f"   üìè –†–∞–∑–º–µ—Ä –ø–∏–∫—Å–µ–ª—è: {pixel_area_km2_cache*1_000_000:.1f} –º¬≤")
    
    return df

# --- –ú–û–î–£–õ–¨ 2: –ó–ê–ì–†–£–ó–ö–ê –í–ù–ï–®–ù–ò–• –î–ê–ù–ù–´–• ---

def load_external_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ GLEAM, IMERG –∏ –∫—Ä–∏–≤—É—é –ø–ª–æ—â–∞–¥—å-–æ–±—ä—ë–º."""
    print("\nüìÇ –ú–û–î–£–õ–¨ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    files_to_check = {
        'GLEAM (–∏—Å–ø–∞—Ä–µ–Ω–∏–µ)': GLEAM_DATA_PATH,
        'IMERG (–æ—Å–∞–¥–∫–∏)': IMERG_DATA_PATH,
        '–ö—Ä–∏–≤–∞—è –ø–ª–æ—â–∞–¥—å-–æ–±—ä—ë–º': AREA_VOLUME_CURVE_PATH
    }
    
    for name, path in files_to_check.items():
        if os.path.exists(path):
            print(f"   ‚úÖ {name}: –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"   ‚ùå {name}: –ù–ï –ù–ê–ô–î–ï–ù - {path}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º GLEAM
    print("\nüìà –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö GLEAM...")
    try:
        gleam_df = pd.read_csv(GLEAM_DATA_PATH)
        gleam_df['date'] = pd.to_datetime(gleam_df['date'])
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–µ–º E –∫–∞–∫ evaporation_mm (–º–º/–¥–µ–Ω—å)
        if 'evaporation_mm' not in gleam_df.columns:
            if 'E' in gleam_df.columns:
                gleam_df = gleam_df.rename(columns={'E': 'evaporation_mm'})
            elif 'evaporation' in gleam_df.columns:
                gleam_df = gleam_df.rename(columns={'evaporation': 'evaporation_mm'})
        print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {gleam_df['date'].min().strftime('%Y-%m-%d')} ‚Äî {gleam_df['date'].max().strftime('%Y-%m-%d')}")
        if 'evaporation_mm' in gleam_df.columns:
            print(f"   üíß –ò—Å–ø–∞—Ä–µ–Ω–∏–µ: {gleam_df['evaporation_mm'].min():.2f} ‚Äî {gleam_df['evaporation_mm'].max():.2f} –º–º/–¥–µ–Ω—å")
        else:
            print("   ‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü evaporation_mm –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ GLEAM")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GLEAM: {e}")
        gleam_df = pd.DataFrame()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º IMERG
    print("\nüåßÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö IMERG...")
    try:
        imerg_df = pd.read_csv(IMERG_DATA_PATH)
        imerg_df['date'] = pd.to_datetime(imerg_df['date'])
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–∞–¥–∫–æ–≤: mean_precip_mm_per_h -> precipitation_mm (√ó24)
        if 'precipitation_mm' not in imerg_df.columns:
            if 'mean_precip_mm_per_h' in imerg_df.columns:
                imerg_df = imerg_df.rename(columns={'mean_precip_mm_per_h': 'precipitation_mm'})
                imerg_df['precipitation_mm'] = imerg_df['precipitation_mm'] * 24.0
            elif 'precipitation' in imerg_df.columns:
                imerg_df = imerg_df.rename(columns={'precipitation': 'precipitation_mm'})
        print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {imerg_df['date'].min().strftime('%Y-%m-%d')} ‚Äî {imerg_df['date'].max().strftime('%Y-%m-%d')}")
        if 'precipitation_mm' in imerg_df.columns:
            print(f"   üåßÔ∏è –û—Å–∞–¥–∫–∏: {imerg_df['precipitation_mm'].min():.2f} ‚Äî {imerg_df['precipitation_mm'].max():.2f} –º–º/–¥–µ–Ω—å")
        else:
            print("   ‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü precipitation_mm –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ IMERG")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ IMERG: {e}")
        imerg_df = pd.DataFrame()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∏–≤—É—é –ø–ª–æ—â–∞–¥—å-–æ–±—ä—ë–º
    print("\nüìè –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏–≤–æ–π –ø–ª–æ—â–∞–¥—å-–æ–±—ä—ë–º...")
    try:
        curve_df = pd.read_csv(AREA_VOLUME_CURVE_PATH)
        print(f"   üìä –¢–æ—á–µ–∫ –Ω–∞ –∫—Ä–∏–≤–æ–π: {len(curve_df)}")
        print(f"   üåä –ü–ª–æ—â–∞–¥—å: {curve_df['area_km2'].min():.2f} ‚Äî {curve_df['area_km2'].max():.2f} –∫–º¬≤")
        print(f"   üíß –û–±—ä—ë–º: {curve_df['volume_mcm'].min():.2f} ‚Äî {curve_df['volume_mcm'].max():.2f} –º–ª–Ω.–º¬≥")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏–≤–æ–π: {e}")
        curve_df = pd.DataFrame()
    
    return gleam_df, imerg_df, curve_df

# --- –ú–û–î–£–õ–¨ 3: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ü–õ–û–©–ê–î–¨ ‚Üí –û–ë–™–Å–ú ---

def area_to_volume_converter(curve_df):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–ª–æ—â–∞–¥–∏ –≤ –æ–±—ä—ë–º."""
    print("\nüîÑ –ú–û–î–£–õ–¨ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –ø–ª–æ—â–∞–¥—å ‚Üí –æ–±—ä—ë–º")
    print("-" * 50)
    
    if curve_df.empty:
        print("   ‚ùå –ö—Ä–∏–≤–∞—è –ø–ª–æ—â–∞–¥—å-–æ–±—ä—ë–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return None
    
    from scipy.interpolate import interp1d
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–ª–æ—â–∞–¥–∏
    curve_sorted = curve_df.sort_values('area_km2')
    areas = curve_sorted['area_km2'].values
    volumes = curve_sorted['volume_mcm'].values
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä
    try:
        # –í–∞–∂–Ω–æ: –∑–∞–ø—Ä–µ—â–∞–µ–º —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—é. –ö–ª–∞–º–ø–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ [min, max] –∫—Ä–∏–≤–æ–π,
        # —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ–±—ä—ë–º—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Ä–∞—Å—á—ë—Ç–∞ –ø–ª–æ—â–∞–¥–∏.
        interpolator = interp1d(
            areas,
            volumes,
            kind='linear',
            bounds_error=False,
            fill_value=(float(volumes[0]), float(volumes[-1]))
        )
        
        print(f"   ‚úÖ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        print(f"   üìè –î–∏–∞–ø–∞–∑–æ–Ω –ø–ª–æ—â–∞–¥–µ–π: {areas.min():.2f} ‚Äî {areas.max():.2f} –∫–º¬≤")
        print(f"   üíß –î–∏–∞–ø–∞–∑–æ–Ω –æ–±—ä—ë–º–æ–≤: {volumes.min():.2f} ‚Äî {volumes.max():.2f} –º–ª–Ω.–º¬≥")
        
        return interpolator
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä–∞: {e}")
        return None

def convert_areas_to_volumes(sentinel_df, area_to_volume_func):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –ø–ª–æ—â–∞–¥–µ–π –≤ –æ–±—ä—ë–º—ã."""
    if area_to_volume_func is None:
        print("   ‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–æ—â–∞–¥–∏ –∫–∞–∫ –µ—Å—Ç—å")
        sentinel_df['volume_mcm'] = sentinel_df['area_km2']  # –ó–∞–≥–ª—É—à–∫–∞
        return sentinel_df
    
    print(f"   üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {len(sentinel_df)} –∑–Ω–∞—á–µ–Ω–∏–π –ø–ª–æ—â–∞–¥–∏ –≤ –æ–±—ä—ë–º—ã...")
    
    volumes = []
    for area in sentinel_df['area_km2']:
        try:
            volume = float(area_to_volume_func(area))
            volumes.append(volume)
        except:
            volumes.append(np.nan)
    
    sentinel_df['volume_mcm'] = volumes
    
    valid_volumes = sentinel_df['volume_mcm'].dropna()
    if len(valid_volumes) > 0:
        print(f"   ‚úÖ –û–±—ä—ë–º—ã: {valid_volumes.min():.2f} ‚Äî {valid_volumes.max():.2f} –º–ª–Ω.–º¬≥")
    else:
        print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
    
    return sentinel_df

# --- –ú–û–î–£–õ–¨ 4: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ò –†–ê–°–ß–Å–¢ –ë–ê–õ–ê–ù–°–ê ---

def create_unified_timeseries(sentinel_df, gleam_df, imerg_df):
    """–°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Ä–∏—é."""
    print("\nüîó –ú–û–î–£–õ–¨ 4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞—Å—á—ë—Ç –±–∞–ª–∞–Ω—Å–∞")
    print("-" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π –ø–µ—Ä–∏–æ–¥
    all_dates = []
    if not sentinel_df.empty:
        all_dates.extend(sentinel_df['date'].tolist())
    if not gleam_df.empty:
        all_dates.extend(gleam_df['date'].tolist())
    if not imerg_df.empty:
        all_dates.extend(imerg_df['date'].tolist())
    
    if not all_dates:
        raise ValueError("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!")
    
    start_date = min(all_dates)
    end_date = max(all_dates)
    
    print(f"   üìÖ –û–±—â–∏–π –ø–µ—Ä–∏–æ–¥: {start_date.strftime('%Y-%m-%d')} ‚Äî {end_date.strftime('%Y-%m-%d')}")
    print(f"   üìä –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(end_date - start_date).days + 1} –¥–Ω–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–µ—Ç–∫—É
    date_range = pd.date_range(start=start_date, end=end_date, freq='D')
    unified_df = pd.DataFrame({'date': date_range})
    
    print(f"\nüîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Sentinel (–æ–±—ä—ë–º—ã)
    if not sentinel_df.empty:
        unified_df = unified_df.merge(
            sentinel_df[['date', 'area_km2', 'volume_mcm']], 
            on='date', how='left'
        )
        valid_sentinel = unified_df['volume_mcm'].dropna()
        print(f"   üõ∞Ô∏è Sentinel: {len(valid_sentinel)} –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏")
    else:
        unified_df['area_km2'] = np.nan
        unified_df['volume_mcm'] = np.nan
        print(f"   üõ∞Ô∏è Sentinel: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ GLEAM (–∏—Å–ø–∞—Ä–µ–Ω–∏–µ)
    if not gleam_df.empty:
        unified_df = unified_df.merge(
            gleam_df[['date', 'evaporation_mm']], 
            on='date', how='left'
        )
        valid_gleam = unified_df['evaporation_mm'].dropna()
        print(f"   üíß GLEAM: {len(valid_gleam)} –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏")
    else:
        unified_df['evaporation_mm'] = np.nan
        print(f"   üíß GLEAM: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ IMERG (–æ—Å–∞–¥–∫–∏)
    if not imerg_df.empty:
        unified_df = unified_df.merge(
            imerg_df[['date', 'precipitation_mm']], 
            on='date', how='left'
        )
        valid_imerg = unified_df['precipitation_mm'].dropna()
        print(f"   üåßÔ∏è IMERG: {len(valid_imerg)} –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏")
    else:
        unified_df['precipitation_mm'] = np.nan
        print(f"   üåßÔ∏è IMERG: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    return unified_df

def interpolate_missing_values(df):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π."""
    print(f"\nüîß –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ({INTERPOLATION_METHOD})...")
    
    numeric_columns = ['area_km2', 'volume_mcm', 'evaporation_mm', 'precipitation_mm']
    
    for col in numeric_columns:
        if col in df.columns:
            before_count = df[col].isna().sum()
            if before_count > 0:
                df[col] = df[col].interpolate(method=INTERPOLATION_METHOD)
                after_count = df[col].isna().sum()
                filled_count = before_count - after_count
                print(f"   üìà {col}: –∑–∞–ø–æ–ª–Ω–µ–Ω–æ {filled_count} –ø—Ä–æ–ø—É—Å–∫–æ–≤")
            else:
                print(f"   ‚úÖ {col}: –ø—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç")
    
    return df

def calculate_water_balance(df):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞."""
    print(f"\n‚öñÔ∏è –†–∞—Å—á—ë—Ç –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_cols = ['volume_mcm', 'area_km2', 'evaporation_mm', 'precipitation_mm']
    missing_cols = [col for col in required_cols if col not in df.columns or df[col].isna().all()]
    
    if missing_cols:
        print(f"   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {missing_cols}")
        print("   üîß –°–æ–∑–¥–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        for col in missing_cols:
            df[col] = 0.0
    
    # 1. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ (ŒîS)
    df['delta_volume_mcm'] = df['volume_mcm'].diff()  # –º–ª–Ω.–º¬≥/–¥–µ–Ω—å
    print(f"   üìä ŒîS (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä—ë–º–∞): —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ")
    
    # 2. –û–±—ä—ë–º –æ—Å–∞–¥–∫–æ–≤ (P)
    # P = –æ—Å–∞–¥–∫–∏ (–º–º/–¥–µ–Ω—å) √ó –ø–ª–æ—â–∞–¥—å (–∫–º¬≤) √ó 0.001 (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–ª–Ω.–º¬≥)
    df['precipitation_volume_mcm'] = df['precipitation_mm'] * df['area_km2'] * 0.001
    print(f"   üåßÔ∏è P (–æ–±—ä—ë–º –æ—Å–∞–¥–∫–æ–≤): —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ")
    
    # 3. –û–±—ä—ë–º –∏—Å–ø–∞—Ä–µ–Ω–∏—è (ET)
    # ET = –∏—Å–ø–∞—Ä–µ–Ω–∏–µ (–º–º/–¥–µ–Ω—å) √ó –ø–ª–æ—â–∞–¥—å (–∫–º¬≤) √ó 0.001 (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–ª–Ω.–º¬≥)
    df['evaporation_volume_mcm'] = df['evaporation_mm'] * df['area_km2'] * 0.001
    print(f"   üí® ET (–æ–±—ä—ë–º –∏—Å–ø–∞—Ä–µ–Ω–∏—è): —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ")
    
    # 4. –û—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å—Ç–æ–∫ (Residual)
    # Residual = ŒîS - P + ET (–ø—Ä–∏—Ç–æ–∫/–æ—Ç—Ç–æ–∫ –Ω–µ —É—á—Ç—ë–Ω–Ω—ã–π –≤ P –∏ ET)
    df['residual_mcm'] = (df['delta_volume_mcm'] - 
                         df['precipitation_volume_mcm'] + 
                         df['evaporation_volume_mcm'])
    print(f"   üîÑ Residual (–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å—Ç–æ–∫): —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ")
    
    # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (NaN –≤ delta_volume_mcm)
    df = df.dropna(subset=['delta_volume_mcm']).reset_index(drop=True)
    
    print(f"   ‚úÖ –í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è {len(df)} –¥–Ω–µ–π")
    
    return df

# --- –ú–û–î–£–õ–¨ 5: –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ---

def save_results(df, output_dir):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–∞–π–ª."""
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        print(f"   üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {output_dir}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    main_output_path = os.path.join(output_dir, 'water_balance_final.csv')
    df.to_csv(main_output_path, index=False)
    print(f"   üíæ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {main_output_path}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats_path = os.path.join(output_dir, 'water_balance_statistics.txt')
    with open(stats_path, 'w', encoding='utf-8') as f:
        f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–î–ï–õ–ò –í–û–î–ù–û–ì–û –ë–ê–õ–ê–ù–°–ê\n")
        f.write("=" * 40 + "\n\n")
        f.write(f"–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {df['date'].min().strftime('%Y-%m-%d')} ‚Äî {df['date'].max().strftime('%Y-%m-%d')}\n")
        f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {len(df)}\n\n")
        
        f.write("–ö–û–ú–ü–û–ù–ï–ù–¢–´ –ë–ê–õ–ê–ù–°–ê (—Å—Ä–µ–¥–Ω–µ–µ ¬± —Å—Ç–¥.–æ—Ç–∫–ª.):\n")
        f.write("-" * 40 + "\n")
        
        numeric_cols = ['volume_mcm', 'delta_volume_mcm', 'precipitation_volume_mcm', 
                       'evaporation_volume_mcm', 'residual_mcm']
        
        for col in numeric_cols:
            if col in df.columns and not df[col].isna().all():
                mean_val = df[col].mean()
                std_val = df[col].std()
                f.write(f"{col}: {mean_val:.3f} ¬± {std_val:.3f} –º–ª–Ω.–º¬≥\n")
        
    print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_path}")
    
    return main_output_path

def create_visualizations(df, output_dir):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞."""
    print(f"\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
    plt.style.use('seaborn-v0_8' if 'seaborn-v0_8' in plt.style.available else 'default')
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ - 4 –ø–∞–Ω–µ–ª–∏
    fig, axes = plt.subplots(4, 1, figsize=(15, 16))
    
    # 1. –û–±—ä—ë–º –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    axes[0].plot(df['date'], df['volume_mcm'], 'b-', linewidth=2, alpha=0.8)
    axes[0].set_ylabel('–û–±—ä—ë–º\n(–º–ª–Ω.–º¬≥)', fontsize=12)
    axes[0].set_title('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–∞', fontsize=14, fontweight='bold')
    axes[0].grid(True, alpha=0.3)
    
    # 2. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä—ë–º–∞
    colors = ['red' if x < 0 else 'green' for x in df['delta_volume_mcm']]
    axes[1].bar(df['date'], df['delta_volume_mcm'], color=colors, alpha=0.6, width=1)
    axes[1].axhline(y=0, color='black', linestyle='-', alpha=0.5)
    axes[1].set_ylabel('ŒîS\n(–º–ª–Ω.–º¬≥/–¥–µ–Ω—å)', fontsize=12)
    axes[1].grid(True, alpha=0.3)
    
    # 3. –û—Å–∞–¥–∫–∏ –∏ –∏—Å–ø–∞—Ä–µ–Ω–∏–µ
    axes[2].bar(df['date'], df['precipitation_volume_mcm'], color='blue', alpha=0.6, 
               label='–û—Å–∞–¥–∫–∏ (P)', width=1)
    axes[2].bar(df['date'], -df['evaporation_volume_mcm'], color='orange', alpha=0.6, 
               label='–ò—Å–ø–∞—Ä–µ–Ω–∏–µ (ET)', width=1)
    axes[2].axhline(y=0, color='black', linestyle='-', alpha=0.5)
    axes[2].set_ylabel('P, ET\n(–º–ª–Ω.–º¬≥/–¥–µ–Ω—å)', fontsize=12)
    axes[2].legend(loc='upper right')
    axes[2].grid(True, alpha=0.3)
    
    # 4. –û—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å—Ç–æ–∫
    residual_colors = ['purple' if x < 0 else 'green' for x in df['residual_mcm']]
    axes[3].bar(df['date'], df['residual_mcm'], color=residual_colors, alpha=0.6, width=1)
    axes[3].axhline(y=0, color='black', linestyle='-', alpha=0.5)
    axes[3].set_ylabel('Residual\n(–º–ª–Ω.–º¬≥/–¥–µ–Ω—å)', fontsize=12)
    axes[3].set_xlabel('–î–∞—Ç–∞', fontsize=12)
    axes[3].grid(True, alpha=0.3)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–µ–π –¥–∞—Ç
    for ax in axes:
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
        ax.xaxis.set_major_locator(mdates.MonthLocator(interval=2))
        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    main_plot_path = os.path.join(output_dir, 'water_balance_timeseries.png')
    plt.savefig(main_plot_path, dpi=300, bbox_inches='tight')
    plt.close()
    print(f"   üìä –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã: {main_plot_path}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ - –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    correlation_plot(df, output_dir)
    
    # –°–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    summary_plot(df, output_dir)

def correlation_plot(df, output_dir):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    numeric_cols = ['volume_mcm', 'delta_volume_mcm', 'precipitation_volume_mcm', 
                   'evaporation_volume_mcm', 'residual_mcm']
    
    available_cols = [col for col in numeric_cols if col in df.columns]
    
    if len(available_cols) < 2:
        print("   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    correlation_matrix = df[available_cols].corr()
    
    fig, ax = plt.subplots(figsize=(10, 8))
    
    im = ax.imshow(correlation_matrix, cmap='RdBu_r', aspect='auto', vmin=-1, vmax=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    for i in range(len(available_cols)):
        for j in range(len(available_cols)):
            text = ax.text(j, i, f'{correlation_matrix.iloc[i, j]:.2f}',
                          ha="center", va="center", color="black", fontweight='bold')
    
    ax.set_xticks(range(len(available_cols)))
    ax.set_yticks(range(len(available_cols)))
    ax.set_xticklabels(available_cols, rotation=45, ha='right')
    ax.set_yticklabels(available_cols)
    ax.set_title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞', 
                fontsize=14, fontweight='bold')
    
    plt.colorbar(im, ax=ax, label='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏')
    plt.tight_layout()
    
    correlation_path = os.path.join(output_dir, 'correlation_matrix.png')
    plt.savefig(correlation_path, dpi=300, bbox_inches='tight')
    plt.close()
    print(f"   üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞: {correlation_path}")

def summary_plot(df, output_dir):
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
    
    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±—ä—ë–º–∞
    ax1.hist(df['delta_volume_mcm'].dropna(), bins=30, alpha=0.7, color='blue', edgecolor='black')
    ax1.axvline(df['delta_volume_mcm'].mean(), color='red', linestyle='--', 
               label=f'–°—Ä–µ–¥–Ω–µ–µ: {df["delta_volume_mcm"].mean():.2f}')
    ax1.set_xlabel('ŒîS (–º–ª–Ω.–º¬≥/–¥–µ–Ω—å)')
    ax1.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±—ä—ë–º–∞')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # 2. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤
    if 'precipitation_mm' in df.columns:
        df['month'] = df['date'].dt.month
        monthly_precip = df.groupby('month')['precipitation_mm'].mean()
        ax2.bar(monthly_precip.index, monthly_precip.values, alpha=0.7, color='blue')
        ax2.set_xlabel('–ú–µ—Å—è—Ü')
        ax2.set_ylabel('–û—Å–∞–¥–∫–∏ (–º–º/–¥–µ–Ω—å)')
        ax2.set_title('–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤')
        ax2.set_xticks(range(1, 13))
        ax2.grid(True, alpha=0.3)
    
    # 3. –ë–∞–ª–∞–Ω—Å P vs ET
    if all(col in df.columns for col in ['precipitation_volume_mcm', 'evaporation_volume_mcm']):
        ax3.scatter(df['precipitation_volume_mcm'], df['evaporation_volume_mcm'], 
                   alpha=0.6, color='green')
        max_val = max(df['precipitation_volume_mcm'].max(), df['evaporation_volume_mcm'].max())
        ax3.plot([0, max_val], [0, max_val], 'r--', alpha=0.8, label='P = ET')
        ax3.set_xlabel('–û—Å–∞–¥–∫–∏ (–º–ª–Ω.–º¬≥/–¥–µ–Ω—å)')
        ax3.set_ylabel('–ò—Å–ø–∞—Ä–µ–Ω–∏–µ (–º–ª–Ω.–º¬≥/–¥–µ–Ω—å)')
        ax3.set_title('–û—Å–∞–¥–∫–∏ vs –ò—Å–ø–∞—Ä–µ–Ω–∏–µ')
        ax3.legend()
        ax3.grid(True, alpha=0.3)
    
    # 4. –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if 'residual_mcm' in df.columns:
        cumulative_residual = df['residual_mcm'].cumsum()
        ax4.plot(df['date'], cumulative_residual, 'purple', linewidth=2)
        ax4.axhline(y=0, color='black', linestyle='--', alpha=0.5)
        ax4.set_xlabel('–î–∞—Ç–∞')
        ax4.set_ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (–º–ª–Ω.–º¬≥)')
        ax4.set_title('–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å')
        ax4.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
        plt.setp(ax4.xaxis.get_majorticklabels(), rotation=45)
        ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    summary_path = os.path.join(output_dir, 'water_balance_summary.png')
    plt.savefig(summary_path, dpi=300, bbox_inches='tight')
    plt.close()
    print(f"   üìã –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {summary_path}")

# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏ –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...\n")
    
    try:
        # –ú–æ–¥—É–ª—å 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ Sentinel-2
        sentinel_df = process_sentinel_timeseries()
        
        # –ú–æ–¥—É–ª—å 2: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        gleam_df, imerg_df, curve_df = load_external_data()
        
        # –ú–æ–¥—É–ª—å 3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–ª–æ—â–∞–¥—å ‚Üí –æ–±—ä—ë–º
        area_to_volume_func = area_to_volume_converter(curve_df)
        sentinel_df = convert_areas_to_volumes(sentinel_df, area_to_volume_func)
        
        # –ú–æ–¥—É–ª—å 4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ —Ä–∞—Å—á—ë—Ç
        unified_df = create_unified_timeseries(sentinel_df, gleam_df, imerg_df)
        unified_df = interpolate_missing_values(unified_df)
        balance_df = calculate_water_balance(unified_df)
        
        # –ú–æ–¥—É–ª—å 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        output_path = save_results(balance_df, OUTPUT_DIR)
        create_visualizations(balance_df, OUTPUT_DIR)
        
        print(f"\nüéâ –ú–û–î–ï–õ–¨ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {OUTPUT_DIR}")
        print(f"üìä –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: {output_path}")
        print(f"üìà –°–æ–∑–¥–∞–Ω—ã –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
        print(f"\nüìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
        print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {balance_df['date'].min().strftime('%Y-%m-%d')} ‚Äî {balance_df['date'].max().strftime('%Y-%m-%d')}")
        print(f"   üìä –î–Ω–µ–π –∞–Ω–∞–ª–∏–∑–∞: {len(balance_df)}")
        print(f"   üåä –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º: {balance_df['volume_mcm'].mean():.2f} –º–ª–Ω.–º¬≥")
        print(f"   ‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {balance_df['residual_mcm'].mean():.3f} –º–ª–Ω.–º¬≥/–¥–µ–Ω—å")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    required_packages = ['pandas', 'numpy', 'matplotlib', 'scipy', 'rasterio']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {missing_packages}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing_packages)}")
    else:
        main()
